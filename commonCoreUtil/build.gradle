apply plugin: 'com.android.library'
apply plugin: 'maven'


def libVersionCode = "1.0.3"

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-noarg'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-android-extensions'


//通用配置引入
apply from: '../commonConfig.gradle'


noArg {
    annotation("com.ztsc.commonutils.annotations.Poko")
}
allOpen {
    annotation("com.ztsc.commonutils.annotations.Poko")
}


kotlin {
    experimental{
        coroutines 'enable'
    }
    androidExtensions {
        experimental = true
    }
}
android {
    compileSdkVersion android.compileSdkVersion

    defaultConfig {
        minSdkVersion android.minSdkVersion
        targetSdkVersion android.targetSdkVersion
        versionCode android.versionCode
        versionName android.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            buildConfigField "String", "android.applicationId", "\"${android.applicationId}\""
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            buildConfigField "String", "APPLICATION_ID", "\"${android.applicationId}\""
        }
        check {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            buildConfigField "String", "APPLICATION_ID", "\"${android.applicationId}\""
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

}


//打包main目录下代码和资源的 task
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    //from android.sourceSets.main.java.srcDirs
}
//配置需要上传到maven仓库的文件
artifacts {
    archives androidSourcesJar
}
//上传到Maven仓库的task
uploadArchives {
    repositories {
        mavenDeployer {
            //指定maven仓库url
            repository(url: "http://localhost:8087/repository/com.ztsc.commonlib/") {
                //nexus登录默认用户名和密码
                authentication(userName: "admin", password: "admin123")
            }
            pom.groupId = "com.ztsc.common"// 唯一标识（通常为模块包名，也可以任意）
            pom.artifactId = "commonlib" // 项目名称（通常为类库模块名称，也可以任意）
            pom.version = libVersionCode // 版本号
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //测试依赖 Android Espresso &&&&&  https://blog.csdn.net/weijianfeng1990912/article/details/51540468
    testImplementation dependenciesLib.junit
    androidTestImplementation dependenciesLib.runner
    androidTestImplementation dependenciesLib.espresso_android
    androidTestImplementation dependenciesLib.junit_android

    implementation dependenciesLib.appcompat_androidx
    api dependenciesLib.disklrucache
    //加密
    implementation files('libs/sunjce_provider.jar')
    api dependenciesLib.android_util_code
    //图片压缩框架


    implementation dependenciesLib.facebook_rebound


    // 基础依赖包，必须要依赖
    api 'com.gyf.immersionbar:immersionbar:3.0.0'
    // fragment快速实现（可选）
//    api 'com.gyf.immersionbar:immersionbar-components:3.0.0'
    // kotlin扩展（可选）
    api 'com.gyf.immersionbar:immersionbar-ktx:3.0.0'

    //吐司库
    api 'com.github.GrenderG:Toasty:1.5.0'

    implementation dependenciesLib.gson


    implementation("org.jetbrains.anko:anko:$anko_version") {
        exclude module: 'support-v4'
    }

    //kotlin 依赖
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"


    api 'com.zzhoujay.richtext:richtext:3.0.8'

    //studio本地日志输出
    api 'com.orhanobut:logger:2.2.0'


    //Log如果我们用手机连着电脑调试，这时候是方便，可以一边操作一边查看信息，
    // 但是万一是安装到了某个客户手机上，或者某个安卓设备上，
    // 这时候你有某个需求需要去知道他的Log的信息，那时候难道你要连着电脑一边操作一边查看Log信息
    // 日志信息存储
    implementation 'com.jakewharton.timber:timber:4.7.1'


    // logback-android很强大，可以存储信息到
    //-files
    //-SQLite databases
    //-logcat
    //-sockets
    //-syslog
    //-email
    //
    //所以我们可以用Timber配合logback-android来模拟存储到文件中。

    implementation 'com.github.tony19:logback-android:2.0.0'

}
